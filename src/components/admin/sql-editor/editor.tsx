
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { runQuery } from '@/app/admin/sql/actions';
import { Loader2, Play, AlertTriangle } from 'lucide-react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

const createSupportTicketsTableQuery = `
CREATE TABLE IF NOT EXISTS public.support_tickets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    category TEXT NOT NULL,
    subject TEXT NOT NULL,
    description TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'Open',
    priority TEXT NOT NULL DEFAULT 'Medium',
    screenshot_url TEXT
);

-- Enable RLS
ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;

-- Allow users to view and create their own tickets
CREATE POLICY "Users can manage their own support tickets"
ON public.support_tickets
FOR ALL
TO authenticated
USING (auth.uid() = user_id);

-- Allow admins to view all tickets
CREATE POLICY "Admins can view all support tickets"
ON public.support_tickets
FOR SELECT
TO authenticated
USING (public.is_admin(auth.uid()));

-- Allow admins to update all tickets
CREATE POLICY "Admins can update all support tickets"
ON public.support_tickets
FOR UPDATE
TO authenticated
USING (public.is_admin(auth.uid()));
`;

export default function SQLEditor() {
  const [query, setQuery] = useState(createSupportTicketsTableQuery.trim());
  const [results, setResults] = useState<any[] | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleRunQuery = async () => {
    setIsLoading(true);
    setError(null);
    setResults(null);

    const { data, error: queryError } = await runQuery(query);

    if (queryError) {
      setError(queryError);
    } else {
      setResults(data);
    }
    setIsLoading(false);
  };
  
  const headers = results && results.length > 0 ? Object.keys(results[0]) : [];

  return (
    <div className="flex flex-col h-full gap-4">
      <Card className="flex-shrink-0">
        <CardContent className="p-4">
          <div className="grid gap-2">
            <Textarea
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="-- Your one-time setup query is pre-filled. Click 'Run Query' to create the 'support_tickets' table."
              className="min-h-[150px] font-mono text-sm"
            />
            <Button onClick={handleRunQuery} disabled={isLoading} className="w-full sm:w-auto">
              {isLoading ? <Loader2 className="mr-2 animate-spin" /> : <Play className="mr-2" />}
              Run Query
            </Button>
          </div>
        </CardContent>
      </Card>
      
      <div className="flex-grow overflow-auto">
        <Card className="h-full">
            <CardContent className="p-4 h-full">
                {isLoading && (
                    <div className="flex items-center justify-center h-full">
                        <Loader2 className="animate-spin text-primary" />
                    </div>
                )}
                {error && (
                    <div className="flex flex-col items-center justify-center h-full text-destructive">
                        <AlertTriangle className="size-8 mb-2" />
                        <p className="font-bold">Query Error</p>
                        <pre className="mt-2 text-xs bg-destructive/10 p-2 rounded-md font-mono">{error}</pre>
                    </div>
                )}
                {results && (
                    <>
                        {results.length > 0 ? (
                            <div className="overflow-auto h-full">
                                <p className="text-sm text-muted-foreground mb-2">Returned {results.length} row{results.length === 1 ? '' : 's'}.</p>
                                <Table>
                                    <TableHeader>
                                        <TableRow>
                                            {headers.map(header => <TableHead key={header}>{header}</TableHead>)}
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        {results.map((row, rowIndex) => (
                                            <TableRow key={rowIndex}>
                                                {headers.map(header => (
                                                    <TableCell key={`${rowIndex}-${header}`} className="font-mono text-xs max-w-[200px] truncate">
                                                        {JSON.stringify(row[header])}
                                                    </TableCell>
                                                ))}
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                            </div>
                        ) : (
                            <div className="flex items-center justify-center h-full text-muted-foreground">
                                <p>Query executed successfully. The 'support_tickets' table should now exist.</p>
                            </div>
                        )}
                    </>
                )}
                {!isLoading && !error && !results && (
                     <div className="flex items-center justify-center h-full text-muted-foreground">
                        <p>Results will be displayed here.</p>
                    </div>
                )}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}
