
-- ========== TABLE: profiles ==========
-- Represents user profiles, extending auth.users.
create table if not exists public.profiles (
  id uuid not null primary key, -- references auth.users(id) on delete cascade
  full_name text,
  avatar_url text,
  handle text unique,
  bio text,
  role text default 'student',
  banner_url text,
  -- Foreign key constraint
  constraint profiles_id_fkey foreign key (id) references auth.users (id) on delete cascade
);

-- ========== TABLE: products ==========
-- Stores products for the marketplace.
create table if not exists public.products (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  name text not null,
  description text not null,
  price numeric not null,
  image_url text,
  category text not null,
  seller_id uuid not null references public.profiles(id) on delete cascade
);

-- ========== TABLE: posts ==========
-- Stores social media posts from users.
create table if not exists public.posts (
  id bigint generated by default as identity primary key,
  content text not null,
  created_at timestamp with time zone not null default now(),
  user_id uuid not null references public.profiles(id) on delete cascade
);

-- ========== TABLE: likes ==========
-- Stores likes on posts.
create table if not exists public.likes (
  post_id bigint not null references public.posts(id) on delete cascade,
  user_id uuid not null references public.profiles(id) on delete cascade,
  created_at timestamp with time zone not null default now(),
  primary key (post_id, user_id)
);

-- ========== TABLE: comments ==========
-- Stores comments on posts.
create table if not exists public.comments (
  id bigint generated by default as identity primary key,
  content text not null,
  post_id bigint not null references public.posts(id) on delete cascade,
  user_id uuid not null references public.profiles(id) on delete cascade,
  created_at timestamp with time zone not null default now()
);

-- ========== TABLE: followers ==========
-- Manages user following relationships.
create table if not exists public.followers (
  follower_id uuid not null references public.profiles(id) on delete cascade,
  following_id uuid not null references public.profiles(id) on delete cascade,
  created_at timestamp with time zone not null default now(),
  primary key (follower_id, following_id)
);

-- ========== TABLE: chat_rooms ==========
-- Stores chat rooms.
create table if not exists public.chat_rooms (
  id uuid default gen_random_uuid() primary key,
  created_at timestamp with time zone not null default now()
);

-- ========== TABLE: chat_room_participants ==========
-- Links users to chat rooms.
create table if not exists public.chat_room_participants (
  room_id uuid not null references public.chat_rooms(id) on delete cascade,
  user_id uuid not null references public.profiles(id) on delete cascade,
  primary key (room_id, user_id)
);

-- ========== TABLE: chat_messages ==========
-- Stores messages within chat rooms.
create table if not exists public.chat_messages (
  id uuid default gen_random_uuid() primary key,
  content text not null,
  room_id uuid not null references public.chat_rooms(id) on delete cascade,
  user_id uuid not null references public.profiles(id) on delete cascade,
  created_at timestamp with time zone not null default now()
);

-- ========== TABLE: donations ==========
-- Stores donation records.
create table if not exists public.donations (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles(id),
    amount integer not null,
    currency character varying(3) not null,
    created_at timestamp with time zone not null default now(),
    razorpay_payment_id text unique
);

-- ========== TABLE: competitions ==========
-- Stores competition listings.
create table if not exists public.competitions (
    id bigint generated by default as identity primary key,
    title text not null,
    description text not null,
    prize integer not null,
    entry_fee integer not null default 0,
    deadline timestamp with time zone not null,
    image_url text,
    details_pdf_url text,
    created_at timestamp with time zone not null default now()
);

-- ========== TABLE: competition_entries ==========
-- Stores user entries for competitions.
create table if not exists public.competition_entries (
    id bigint generated by default as identity primary key,
    competition_id bigint not null references public.competitions(id) on delete cascade,
    user_id uuid not null references public.profiles(id) on delete cascade,
    created_at timestamp with time zone not null default now(),
    razorpay_payment_id text unique,
    unique (competition_id, user_id)
);

-- ========== TABLE: internships ==========
-- Stores internship listings.
create table if not exists public.internships (
    id bigint generated by default as identity primary key,
    role text not null,
    company text not null,
    stipend integer not null default 0,
    stipend_period text,
    location text not null,
    deadline timestamp with time zone not null,
    image_url text,
    details_pdf_url text,
    created_at timestamp with time zone not null default now()
);

-- ========== TABLE: orders ==========
-- Stores orders made in the marketplace.
create table if not exists public.orders (
    id bigint generated by default as identity primary key,
    buyer_id uuid not null references public.profiles(id) on delete cascade,
    vendor_id uuid not null references public.profiles(id) on delete cascade,
    total_amount numeric not null,
    created_at timestamp with time zone not null default now(),
    razorpay_payment_id text,
    status text default 'Pending'
);

-- ========== TABLE: order_items ==========
-- Stores items within an order.
create table if not exists public.order_items (
    id bigint generated by default as identity primary key,
    order_id bigint not null references public.orders(id) on delete cascade,
    product_id bigint not null references public.products(id) on delete cascade,
    quantity integer not null,
    price numeric not null
);

-- ========== TABLE: platform_settings ==========
-- Stores global platform settings as key-value pairs.
create table if not exists public.platform_settings (
    key text primary key,
    value jsonb not null
);

-- ========== TABLE: audit_log ==========
-- Logs administrative actions.
create table if not least exists public.audit_log (
    id bigint generated by default as identity primary key,
    admin_id uuid not null references public.profiles(id),
    action text not null,
    details text,
    created_at timestamp with time zone not null default now()
);

-- ========== TABLE: app_config ==========
-- Simplified key-value store for app-wide configuration.
create table if not exists public.app_config (
    key text primary key,
    value text not null
);

-- ========== TABLE: notifications ==========
-- Stores user notifications.
create table if not exists public.notifications (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.profiles(id) on delete cascade,
    sender_id uuid not null references public.profiles(id) on delete cascade,
    type text not null,
    post_id bigint references public.posts(id) on delete cascade,
    is_read boolean not null default false,
    created_at timestamp with time zone not null default now()
);

-- ========== TABLE: support_tickets ==========
-- Stores user-submitted support tickets and feedback.
create table if not exists public.support_tickets (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null references public.profiles(id) on delete cascade,
    subject text not null,
    description text not null,
    category text not null,
    status text not null default 'Open',
    priority text not null default 'Medium',
    attachment_url text
);
